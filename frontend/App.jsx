import React, { useState } from 'react';
import './styles.css';

const questions = [
  { key: 'age', label: '–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É?', options: ['2‚Äì3 –≥–æ–¥–∞', '4‚Äì5 –ª–µ—Ç', '6‚Äì7 –ª–µ—Ç', '8‚Äì9 –ª–µ—Ç', '10+'] },
  { key: 'diagnosis', label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ –¥–∏–∞–≥–Ω–æ–∑ –∞—É—Ç–∏–∑–º–∞?', options: ['–î–∞', '–ù–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ', '–ù–µ—Ç'] },
  { key: 'features', label: '–£ —Ä–µ–±—ë–Ω–∫–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:', options: ['–°–µ–Ω—Å–æ—Ä–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–ù–∞—Ä—É—à–µ–Ω–∏—è –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏', '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π', '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—Å–ø—ã—à–∫–∏ / —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å'], multiple: true },
  { key: 'difficulties', label: '–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—ã –∑–∞–º–µ—á–∞–µ—Ç–µ —É —Ä–µ–±—ë–Ω–∫–∞?', options: ['–ù–µ –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', '–ò–∑–±–µ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤ / —Ç–µ–∫—Å—Ç—É—Ä', '–ù–µ –º–æ–∂–µ—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è—Ö', '–ü–ª–æ—Ö–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–µ–π –¥–≤–∏–∂–µ–Ω–∏–π', '–ß–∞—Å—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç—Å—è, –Ω–µ—É—Å–∏–¥—á–∏–≤', '–ï–º—É —Ç—Ä—É–¥–Ω–æ –≤—ã—Ä–∞–∂–∞—Ç—å —ç–º–æ—Ü–∏–∏'], multiple: true },
  { key: 'goal', label: '–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã —Å—Ç–∞–≤–∏—Ç–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π?', options: ['–£–ª—É—á—à–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏', '–†–∞–∑–≤–∏—Ç–∏–µ –º–µ–ª–∫–æ–π –º–æ—Ç–æ—Ä–∏–∫–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏', '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤–Ω–∏–º–∞–Ω–∏—è', '–ü–æ–º–æ—á—å —Ä–µ–±—ë–Ω–∫—É –ª—É—á—à–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —ç–º–æ—Ü–∏–∏', '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∫—Ä—É–≥–æ–∑–æ—Ä–∞', '–ü—Ä–æ—Å—Ç–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –∏ –æ—Ç–¥—ã—Ö'] },
  { key: 'frequency', label: '–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏ –≤ –Ω–µ–¥–µ–ª—é?', options: ['1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', '2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '–•–æ—á—É —Å–∞–º(–∞) –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'] },
  { key: 'instrument', label: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ–º–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ –∏–ª–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä?', options: ['–î–∞', '–ù–µ—Ç, –Ω–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–Ω–ª–∞–π–Ω-–ø–∏–∞–Ω–∏–Ω–æ'] }
];

export default function App() {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState({ name: '–†–æ–¥–∏—Ç–µ–ª—å' });
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const current = questions[step];

  const handleChange = (option) => {
    if (current.multiple) {
      const selected = answers[current.key] || [];
      const updated = selected.includes(option)
        ? selected.filter(o => o !== option)
        : [...selected, option];
      setAnswers({ ...answers, [current.key]: updated });
    } else {
      setAnswers({ ...answers, [current.key]: option });
    }
  };

  const handleNext = async () => {
    if (step < questions.length - 1) {
      setStep(step + 1);
    } else {
      setLoading(true);
      try {
        const response = await fetch('http://localhost:8000/generate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(answers)
        });
        const data = await response.text();
        setResult(data);
      } catch (e) {
        setResult('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞.');
      } finally {
        setLoading(false);
      }
    }
  };

  if (loading) return <div className="container"><h2>‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω...</h2></div>;
  if (result) return <div className="container result"><h2>üéµ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω</h2><p>{result}</p></div>;

  return (
    <div className="container">
      <h2>{current.label}</h2>
      <div className="options">
        {current.options.map(option => (
          <button
            key={option}
            className={
              current.multiple
                ? (answers[current.key]?.includes(option) ? 'selected' : '')
                : (answers[current.key] === option ? 'selected' : '')
            }
            onClick={() => handleChange(option)}
          >
            {option}
          </button>
        ))}
      </div>
      <button className="next" onClick={handleNext}>
        {step < questions.length - 1 ? '–î–∞–ª–µ–µ ‚Üí' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω'}
      </button>
    </div>
  );
}
